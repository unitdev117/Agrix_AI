AgrixCheck Project Overview

Overview
- A Telegram bot powered by Google’s Gemini (gemini-1.5-flash) that supports multilingual conversations (English and Hindi).
- Uses Express for a lightweight HTTP endpoint/health check, MongoDB (via Mongoose) for user persistence, and dotenv for configuration.
- Core runtime: Node.js, CommonJS modules.

How It Runs
1) Configuration
   - Reads environment variables from .env using dotenv.
   - Required: TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, MONGO_URI. Optional: PORT (default 8000).

2) Startup (app.js)
   - Validates TELEGRAM_BOT_TOKEN; exits if missing.
   - Connects to MongoDB via config/db.js.
   - Initializes Telegram bot with polling using node-telegram-bot-api.
   - Sets bot command menu via services/botSetupService.setBotCommands.
   - Injects the bot instance into controllers/botController.setBot.
   - Registers Telegram event listeners for /start, /lang, callback_query, and general messages.
   - Starts an Express server with a root route returning a simple status message.

3) User Flow (Telegram)
   - /start
     • Looks up or creates a user record (services/databaseService.findOrCreateUser).
     • New users: greeted and prompted to choose a language via inline keyboard.
     • Existing users: greeted with their current language; told about /lang.
   - /lang
     • Sends an inline keyboard to select language (utils/helpers.getLanguageKeyboard).
   - Language selection (callback_query)
     • Callback data like lang_en or lang_hi is parsed.
     • Updates user language in MongoDB (services/databaseService.updateUserLanguage).
     • Writes the preference to an in-memory cache (services/cacheService.set).
     • Acknowledges update and clears the old inline keyboard.
   - Free-form messages (non-command)
     • Shows typing indicator.
     • Ensures user exists and fetches the preferred language.
     • Calls Gemini via controllers/geminiController.generateResponse(prompt, languageName).
     • Sends the model’s text back to the chat.

4) AI Response Generation (controllers/geminiController.js)
   - Initializes GoogleGenerativeAI with GEMINI_API_KEY and selects model gemini-1.5-flash.
   - Uses generateContent for a stateless single-turn response.
   - Appends a language instruction to the prompt (e.g., “Please provide the response in English/Hindi”).
   - Returns plain text; on error, returns a friendly fallback message.

Data Model
- models/User.js
  • telegramId (Number, unique, required)
  • firstName (String, required)
  • username (String, optional)
  • language (String, default 'en')
  • timestamps (createdAt, updatedAt)

Services
- services/databaseService.js
  • findOrCreateUser(userInfo): Idempotent lookup or create by Telegram ID.
  • updateUserLanguage(telegramId, languageCode): Persist user’s language preference.

- services/cacheService.js
  • A simple in-memory Map for quick lookup of user preferences (e.g., language).
  • Methods: set(key, value), get(key), del(key).

- services/botSetupService.js
  • setBotCommands(bot): Defines the bot’s command list (/start, /lang).

Controllers
- controllers/botController.js
  • setBot(bot): Captures bot instance for handler functions.
  • handleStart(msg): New/existing user greeting; triggers language flow for new users.
  • handleLanguage(msg): Sends language selection inline keyboard.
  • handleCallbackQuery(callbackQuery): Updates selected language in DB + cache; acknowledges selection.
  • handleMessage(msg): Handles non-command messages, invokes Gemini, and replies with AI output.

- controllers/geminiController.js
  • generateResponse(prompt, languageName): Stateless call to Gemini model, returns text.

Utilities
- utils/helpers.js
  • getLanguageKeyboard(): Inline keyboard for EN/HI selection.
  • languageMap: Maps 'en' → 'English', 'hi' → 'Hindi'.

- utils/errors.js
  • Placeholder for shared error utilities (currently empty).

Configuration
- config/db.js
  • connectDB(): Connects to MongoDB using MONGO_URI; logs success or exits on failure.

HTTP Server
- app.js sets up Express and exposes GET / → “Gemini Telegram Bot is running!” for basic health/visibility.

Folder Structure
- app.js                           Main application entry point
- package.json                     Node package metadata; dependencies and scripts
- README.txt                       Quickstart and brief feature list
- config/
  - db.js                          MongoDB connection setup
- controllers/
  - botController.js               Telegram command & message handlers
  - geminiController.js            Gemini AI integration wrapper
- models/
  - User.js                        Mongoose schema for Telegram users
- services/
  - botSetupService.js             Sets Telegram bot command menu
  - cacheService.js                In-memory cache for user preferences
  - databaseService.js             DB operations for users
- utils/
  - helpers.js                     UI helpers (inline keyboard) and language map
  - errors.js                      Error utilities (placeholder)
- node_modules/                    Installed dependencies

Dependencies (purpose)
- @google/generative-ai            Google Gemini API client
- node-telegram-bot-api            Telegram bot polling and messaging
- express                          Minimal HTTP server for health/monitoring
- mongoose                         MongoDB ODM
- dotenv                           Loads environment variables from .env

End-to-End Flow Summary
1) Operator runs: node app.js
2) App loads .env, validates TELEGRAM_BOT_TOKEN, connects to MongoDB.
3) Telegram bot is created with polling; command menu is set; bot controller is initialized.
4) Express server starts (default port 8000) and returns a health message on '/'.
5) Users chat via Telegram:
   - /start → user record ensure, greet, prompt for language (if new) or welcome back.
   - /lang → language inline keyboard.
   - Language button → writes preference to MongoDB + cache; user notified.
   - Free text → Gemini is called with language instruction; reply sent back.
6) Errors are logged and user receives a generic error message when issues occur.

Operational Notes
- Ensure MongoDB network access/IP allowlist is set to permit this host.
- Keep GEMINI_API_KEY and TELEGRAM_BOT_TOKEN secure; never commit .env.
- cacheService is process-local; preferences persist in MongoDB even if cache clears on restart.

Extending the Bot
- Add commands: Update services/botSetupService.js and add new handlers in controllers/botController.js.
- Add languages: Extend utils/helpers.languageMap and getLanguageKeyboard; update any UI text.
- Add persistence: Extend models/User.js and services/databaseService.js accordingly.

